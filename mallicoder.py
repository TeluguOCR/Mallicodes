#! /usr/bin/python3
# -*- coding: utf-8 -*-

(LETTER, TOP_CIRCLES,   TOP_AROUND, TOP_MID, TOP_VATTU, TALA, SIDE, 
         BOT_CIRCLES,   BOT_AROUND, BOT_MID, BOT_VATTU, TRANSITION) = range(12)
CodeLens = (0, 16, 5, 4, 1, 11, 12, 
               16, 5, 4, 1, 4)      
CodeIndices = [sum(CodeLens[:x]) for x, _ in enumerate(CodeLens)]
CodeNames = ('LETTER', 'TC',  'TA',   'TM', 'TV', 'TL', 'SD',
                       'BC',  'BA',   'BM', 'BV', 'TR')

IDX_VUPU    = CodeIndices[BOT_CIRCLES] + 4
IDX_TOPBASE = CodeIndices[TOP_AROUND]  + 2
IDX_BOTHEAD = CodeIndices[BOT_AROUND]  + 0
IDX_BOTBASE = CodeIndices[BOT_AROUND]  + 2
IDX_BOTMID  = CodeIndices[BOT_MID] 
IDX_SIDE    = CodeIndices[SIDE]                     

Codes = {
'ka':   ['క',	   0x9286, 0x15,   0x2,	0x0,	0xc1,   0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'kha':  ['ఖ',	   0xf2fc, 0x3,	0x8,	0x1,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'ga':   ['గ',	   0x1284, 0x1b,   0x0,	0x0,	0xc1,   0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'gha':  ['ఘ',	   0x02fc, 0x2,	0x0,	0x1,	0x0,	0x3,	0x0,	0x0,	0x0,	0x0,	0x0],
'ṅa':   ['ఙ',	   0x73dc, 0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'ca':   ['చ',	   0x02dc, 0x3,	0x1,	0x0,	0xc1,   0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'cha':  ['ఛ',	   0x02dc, 0x3,	0x1,	0x1,	0xc1,   0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'ja':   ['జ',	   0x7edc, 0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'jha':  ['ఝ',	   0x32cc, 0x1a,0x8,	0x0,	0xc1,   0x3,	0x0,	0x0,	0x0,	0x0,	0x8],
'ña':   ['ఞ',	   0x330f, 0x2,	0x0,	0x0,	0x0,	0xe,	0x0,	0x0,	0x0,	0x0,	0x8],
'ṭa':   ['ట',	   0xf2cc, 0xa,	0x0,	0x0,	0x200,  0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'ṭha':  ['ఠ',	   0x1284, 0x1f,   0xa,	0x0,	0xc1,   0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'ḍa':   ['డ',	   0x12cf, 0x19,   0x0,	0x0,	0xc1,   0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'ḍha':  ['ఢ',	   0x12cf, 0x19,   0x0,	0x1,	0xc1,   0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'ṇa':   ['ణ',	   0xb39f, 0x2,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'ta':   ['త',      0xf28f, 0xf, 0x0,    0x0,    0xc1,   0x0,    0x0,    0x0,    0x0,    0x0,    0x0],
#'ta':   ['త',     0x829f, 0xf, 0x0,    0x0,    0xc1,   0x0,    0x0,    0x0,    0x0,    0x0,    0x0],
#'ta':   ['త',     0x02ff, 0x7, 0x0,    0x0,    0xc1,   0x0,    0x0,    0x0,    0x0,    0x0,    0x0],
#'ta':   ['త',     0x8696, 0xf, 0x0,    0x0,    0xc1,   0x0,    0x0,    0x0,    0x0,    0x0,    0x0],
'tha':  ['థ',	   0x12cc, 0x1b,   0xa,	0x1,	0xc1,   0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'da':   ['ద',	   0x12cc, 0x1b,   0x0,	0x0,	0xc1,   0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'dha':  ['ధ',	   0x12cc, 0x1b,   0x0,	0x1,	0xc1,   0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'na':   ['న',	   0x02bc, 0x3,	0x0,	0x0,	0xc1,   0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'pa':   ['ప',	   0x02fc, 0x2,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'pha':  ['ఫ',	   0x02fc, 0x2,	0x0,	0x1,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'ba':   ['బ',	   0x72dc, 0x2,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'bha':  ['భ',	   0x72dc, 0x3,	0x0,	0x1,	0xc1,   0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'ma':   ['మ',	   0x02fc, 0x3,	0x0,	0x0,	0xc1,   0x3,	0x0,	0x0,	0x0,	0x0,	0x0],
'ya':   ['య',	   0x32cc, 0xb,	0x8,	0x0,	0xc1,   0x3,	0x0,	0x0,	0x0,	0x0,	0x0],
'mau':  ['మౌ',    0x02fc, 0x3,	0x0,	0x0,	0xeb,   0x3,	0x0,	0x0,	0x0,	0x0,	0x0],
'yau':  ['యౌ',   0x32cc, 0xb,	0x8,	0x0,	0xeb,   0x3,	0x0,	0x0,	0x0,	0x0,	0x0],
'yi':   ['యి',	   0x32cc, 0xa,	0x8,	0x0,	0x0,	0x3,	0x0,	0x0,	0x0,	0x0,	0x0],
'ra':   ['ర',	   0x1284, 0x1f,   0x0,	0x0,	0xc1,   0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'la':   ['ల',	   0xf284, 0xe,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'va':   ['వ',	   0x02fc, 0x3,	0x0,	0x0,	0xc1,   0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'śa':   ['శ',	   0x061f, 0x1,	0x2,	0x0,	0xc1,   0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'ṣa':   ['ష',	   0x02fc, 0x2,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x8],
'sa':   ['స',	   0x02bc, 0x2,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'ha':   ['హ',	   0x02fc, 0x2,	0x0,	0x0,	0x0,	0xe,	0x0,	0x0,	0x0,	0x0,	0x0],
'hā':   ['హా',	   0x02fc, 0x2,	0x0,	0x0,	0x4,	0xe,	0x0,	0x0,	0x0,	0x0,	0x0],
'ḷa':   ['ళ',	   0xf60f, 0x1,	0x2,	0x0,	0xc1,   0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'ṟa':   ['ఱ',	   0xfbcc, 0xa,	0x2,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'a':	['అ',	   0xfb84, 0xe,	0x2,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'ā':	['ఆ',	   0xff86, 0xc,	0x2,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'i':	['ఇ',	   0x330f, 0x2,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x8],
'ī':	['ఈ',	   0x1284, 0x1f,0x7,	0x0,	0xc1,	0x3,	0x0,	0x0,	0x0,	0x0,	0x0],
'u':	['ఉ',	   0x10cc, 0x19,0x3,	0x0,	0x200,  0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'ū':	['ఊ',	   0x10cc, 0x19,0x7,	0x0,	0x240,  0x3,	0x0,	0x0,	0x0,	0x0,	0x0],
'r̥':   ['ఋ',	   0x72dc, 0x2,	0x0,	0x0,	0x0,	0x33,   0x0,	0x0,	0x0,	0x0,	0x0],
'r̥̄':  ['ౠ',	   0x72dc, 0x2,	0x0,	0x0,	0x0,	0xe33,  0x0,	0x0,	0x0,	0x0,	0x0],
'e':	['ఎ',	   0x02fc, 0x3,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'ē':	['ఏ',	   0x02fc, 0x3,	0x0,	0x0,	0x200,  0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'ai':   ['ఐ',	   0x33fc, 0x2,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'o':	['ఒ',	   0x70dc, 0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'ō':	['ఓ',	   0x70dc, 0x0,	0x0,	0x0,	0x200,  0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'au':   ['ఔ',	   0x70dc, 0x10,0x0,	0x0,	0x6b,   0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'ă':	['ఁ',	   0x0108, 0x0,	0x8,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'ṁ':	['ం',	   0x1284, 0x1f,0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'ḥ':	['ః',	   0x0f0f, 0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'✓':	['✓',	   0x0,	0x0,	0x0,	0x0,	0xc1,   0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'+ā':   ['ా',	   0x0,	0x0,	0x0,	0x0,	0x0,	0xe,	0x0,	0x0,	0x0,	0x0,	0x0],
'+i':   ['ి',	   0x0,	0x0,	0x0,	0x0,	0xf0,   0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'+ī':   ['ీ',	   0x0,	0x0,	0x0,	0x0,	0xf4,   0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'+u':   ['ు',	   0x0,	0x0,	0x0,	0x0,	0x0,	0x3,	0x0,	0x0,	0x0,	0x0,	0x0],
'+ū':   ['ూ',	   0x0,	0x0,	0x0,	0x0,	0x0,	0xe3,   0x0,	0x0,	0x0,	0x0,	0x0],
'+e':   ['ె',	   0x0,	0x0,	0x0,	0x0,	0x160,  0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'+ē':   ['ే',	   0x0,	0x0,	0x0,	0x0,	0x164,  0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'+ai':  ['ై',	   0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0xf000, 0x0,	0x2,	0x0,	0x0],
'+o':   ['ొ',	   0x0,	0x0,	0x0,	0x0,	0xb3,   0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'+ō':   ['ో',	   0x0,	0x0,	0x0,	0x0,	0xb7,   0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'+':	['్',	   0x0,	0x0,	0x0,	0x0,	0x68,   0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'+au':  ['ౌ',	   0x0,	0x0,	0x0,	0x0,	0x6b,   0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'+ka':  ['్క',	  0x0006, 0x4,	0x0,	0x0,	0x0,	0x0,	0x0f00, 0x0,	0x0,	0x0,	0x4],
'+ta':  ['్త',	  0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0f00, 0x0,	0x2,	0x0,	0x0],
'+na':  ['్న',	  0x20,   0x0,	0x0,	0x1,	0x0,	0x0,	0xf800, 0x0,	0x0,	0x0,	0x0],
'+ma':  ['్మ',	  0x7,	0x4,	0x0,	0x0,	0x0,	0x0,	0xdf00, 0x0,	0x0,	0x0,	0x0],
'+ya':  ['్య',	  0xb,	0x4,	0x0,	0x0,	0x0,	0x0,	0x0f00, 0x0,	0x0,	0x0,	0x0],
'+ra1': ['్ర౧',	 0x0,	0x0,	0x8,	0x1,	0x0,	0x0,	0x0800, 0x0,	0x0,	0x0,	0x0],
'+ra':  ['్ర',	  0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x8400, 0x0,	0x2,	0x0,	0x0],
'+ra2': ['్ర౩',	 0x0f00, 0x2,	0x0,	0x0,	0x0,	0x0,	0x0400, 0x0,	0x0,	0x0,	0x8],
'+la':  ['్ల',	  0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0xb700, 0x0,	0x0,	0x0,	0x0],
'+va':  ['్వ',	  0x2,	0x0,	0x4,	0x0,	0x0,	0x0,	0xfc00, 0x0,	0x0,	0x0,	0x8],
'+r̥':   ['ృ',	   0x02,   0x0,	0x0,	0x0,	0x0,	0x0,	0x0f00, 0x0,	0x0,	0x0,	0x8],
'+r̥̄':   ['ౄ',	   0x02,   0x0,	0x4,	0x0,	0x0,	0x1,	0x0f00, 0x0,	0x0,	0x0,	0x8],
'+śa':  ['్శ',	  0x6,	0x4,	0x0,	0x0,	0x0,	0x0,	0x0f00, 0x0,	0x0,	0x0,	0x0],
'+ha':  ['్హ',	  0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x02fc, 0x2,	0x0,	0x0,	0x4],
'+ca':  ['్చ',	  0x2,	0x0,	0x0,	0x0,	0x0,	0x0,	0xdc00, 0x0,	0x0,	0x0,	0xa],
'+cha': ['్ఛ',	  0x2,	0x0,	0x0,	0x0,	0x0,	0x0,	0xdc00, 0x0,	0x8,	0x0,	0xa],
'+pa':  ['్ప',	  0x2,	0x0,	0x0,	0x0,	0x0,	0x0,	0xfc00, 0x0,	0x0,	0x0,	0x8],
'+pha': ['్ఫ',	  0x2,	0x0,	0x0,	0x0,	0x0,	0x0,	0xfc00, 0x0,	0x8,	0x0,	0x8],
'+ba':  ['్బ',	  0x2,	0x0,	0x0,	0x0,	0x0,	0x0,	0x70dc, 0x2,	0x0,	0x0,	0x8],
'+bha': ['్భ',	  0x2,	0x0,	0x0,	0x0,	0x0,	0x0,	0x70dc, 0x2,	0x0,	0x1,	0x8],
'+ṣa':  ['్ష',	  0x2,	0x0,	0x0,	0x0,	0x0,	0x0,	0xfc00, 0x2,	0x0,	0x0,	0x8],
'+sa':  ['్స',	  0x2,	0x0,	0x0,	0x0,	0x0,	0x0,	0xbc00, 0x0,	0x0,	0x0,	0x8],
'+ḷa':  ['్ళ',	  0x2,	0x0,	0x0,	0x0,	0x0,	0x0,	0xf40f, 0x0,	0x2,	0x0,	0x8],
'+pu':      ['్పు', 0x2,	0x0,	0x0,	0x0,	0x0,	0x1,	0xfc00, 0x0,	0x0,	0x0,	0x8],
'dot':  ['.',	   0x0,	0x0,	0x0,	0x1,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'=':	['=',	   0x0,	0x4,	0x2,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'-':	['-',	   0x0,	0x0,	0x2,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
',':	[',',	   0x40,   0x0,	0x0,	0x0,	0x0,	0x0,	0x1000, 0x0,	0x0,	0x0,	0x0],
'!':	['!',	   0x0,	0x4,	0x8,	0x1,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'।':		['।',	   0x0,	0x0,	0x8,	0x1,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'॥':		['॥',	   0x0,	0x2,	0x8,	0x1,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x8],
'0':	['0',	   0x1284, 0x1f,0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'1':	['1',	   0x3000, 0x4,	0x8,	0x1,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'2':	['2',	   0x1690, 0x15,0x2,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x2],
'3':	['3',	   0x1686, 0x15,0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'4':	['4',	   0x9000, 0x2,	0x2,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x8],
'5':	['5',	   0x86,   0x15,0x3,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'6':	['6',	   0x1096, 0x1d,0x2,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'7':	['7',	   0x0601, 0x11,0x0,	0x1,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'8':	['8',	   0x9696, 0x15,0x2,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'9':	['9',	   0x9684, 0x17,0x2,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'౦':	    ['౦',	   0x1284, 0x1f,0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'౧':	    ['౧',	   0x1284, 0x1b,0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'౨':	    ['౨',	   0x0f04, 0x6,	0x0,	0x0,	0x0,	0x0,	0x0,    0x0,    0x0,	0x0,	0x2],
'౩':	    ['౩',	   0x1686, 0x15,0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'౪':    	['౪',	   0x960f, 0x0,	0x2,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'౫':	    ['౫',	   0x3fc6, 0x0,	0x8,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'౬':	['౬',	   0x9090, 0x14,0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'౭':	    ['౭',	   0x1694, 0x15,0x2,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'౮':	['౮',	   0x1284, 0xe,	0x0,	0x0,	0x0,	0x8,	0x0,	0x0,	0x0,	0x0,	0x0],
'౯':	    ['౯',	   0x9090, 0x11,0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'ఽ':	['ఽ',	   0xf090, 0x4,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'openparen':	['(',	0x0100, 0x0,	0x8,	0x1,	0x0,	0x0,	0x0800, 0x0,	0x0,	0x0,	0x0],
'closeparen':   [')',	0x2000, 0x0,	0x8,	0x1,	0x0,	0x0,	0x4000, 0x0,	0x0,	0x0,	0x0],
'singlequote':  ['sq',	0x0100, 0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'doublequote':  ['dq',	0x1100, 0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
'question':	    ['?',	0x1601, 0x15,   0x0,	0x1,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0],
}

Sides = ('+u', '+ū', '+ā')

SpecialCombos = {
'mo': ('me', '+u'),
'mō': ('me', '+ā'),
'yo': ('ye', '+u'),
'yō': ('ye', '+ā'),
'yī': ('yi', '+ā'),
'jhō':('jhe','+ā')
}


def hex2binary(num):
    return [int(num & (1 << i) > 0) for i in range(16)]


def code2list(ntuple):
    lcode = []
    for i in range(1, len(ntuple)):
        bits = hex2binary(ntuple[i])[:CodeLens[i]]
        bits.reverse()
        lcode += bits

    # Fix పాఫొసోషౌ
    if ntuple[LETTER] in ('పా','పొ','పో','పౌ','ఫా','ఫొ','ఫో','ఫౌ',
                          'సా','సొ','సో','సౌ','షా','షొ','షో','షౌ',):
        lcode[CodeIndices[TALA]] = 1

    # Fix వు పు ఫు వూ పూ పూ
    if ntuple[LETTER] in ('వు', 'పు', 'ఫు', 'వూ', 'పూ', 'ఫూ'):
        lcode[IDX_VUPU]   = 1
        lcode[IDX_VUPU+1] = 1

    # Fix top base being same as bottom top/head
    lcode[IDX_TOPBASE] |= lcode[IDX_BOTHEAD]

    # Reduce the number of bits used to store sides
    farside = ntuple[SIDE] & 0xff0
    newside = {0xe30:(1, 1), 0x0e0:(1, 0), 0x030:(0,1)}
    if farside != 0:    # మూ 
        lcode[IDX_SIDE:IDX_SIDE+2] = newside[farside]

    lcode = delredundants(lcode)
    return lcode


def delredundants(lcode):
    assert len(lcode) == sum(CodeLens)
    # Delete redundant ones (removes later ones first!)
    redundants = [IDX_BOTMID+3, IDX_BOTMID+1, 
                  IDX_BOTHEAD, IDX_BOTHEAD+4, IDX_BOTBASE, 
                  CodeIndices[TRANSITION]+3] + list(range(IDX_SIDE+2,
                                                          IDX_SIDE+8))
    for index in sorted(redundants, reverse=True):
        del lcode[index]

    return lcode


def addperi(pair):
    """Function to add the vowel sign to a consonant"""
    (main_let, peri_let) = pair
    main = list(getcode(main_let))        
                    # Recursion happens only for SpecialCombos
                    # list used for dereferencing

    peri = Codes[peri_let]
    main[LETTER] += peri[LETTER]

    if peri_let in Sides:
        if   main[SIDE] <= 0:     sidelen = 0
        elif main[SIDE] <= 0xf:   sidelen = 4
        else:                     sidelen = 8
        main[SIDE] |= peri[SIDE] << sidelen

        # Wipe head for ...
        if 'రాశాఢాధావాఛాఠాథాడాతాచాభాకాగాదాళానా'.find(main[LETTER]) >= 0:
            main[TALA] = 0

    else:
        if main[TALA] == Codes['✓'][TALA]:
            main[TALA] = peri[TALA]

        else:
            main[TALA] |= peri[TALA]          # 'OR'ing for ట
            if main[LETTER][0] in 'జటణబఱలఙ':  # Connect main to peri
                main[TOP_AROUND] |= 0x01

    return main


def shift(main):
    """Shifts the entire symbol below baseline"""
    shifted = ('్' + main[LETTER],
        0,0,0,0,0,0,
        main[TOP_CIRCLES], main[TOP_AROUND], main[TOP_MID], main[TOP_VATTU],
        0)
    return shifted


def getcode(akshara):
    """Gives the unoptimized full encoding for each letter"""
    if   akshara in Codes:
        aksh_code = Codes[akshara]

    elif akshara[0] == '+':
        aksh_code = shift(Codes[akshara[1:]])

    elif akshara in SpecialCombos:
        aksh_code = addperi(SpecialCombos[akshara])

    elif akshara[-2:] in ('au'):
        aksh_code = addperi((akshara[:-2]+'a', '+' + akshara[-2:]))

    elif akshara[-1] in ('ā','ī','ū','ē','ō','i','u','e','o'):
        aksh_code = addperi((akshara[:-1]+'a', '+' + akshara[-1:]))

    elif akshara + 'a' in Codes:
        aksh_code = addperi((akshara+'a', '+'))

    else:
        raise KeyError

    return aksh_code


############# UTILITY CODE ##################
import os, sys

unicode_list = []
mallicode_list = []
char_indices = {}
ichar = 0
malliwts = None


def getcolsums(mat):
    """Count how many times each bit is used(set to ON)"""
    ncols = len(mat[0])
    sums = [0] * ncols
    for irow in mat:
        for i in range(ncols):
            sums[i] += irow[i]
    return sums


def getbitsignificance(mat):
    """How many times does a bit-error lead to a symbol-error"""
    from math import log
    ncols = len(mat[0])
    nrows = len(mat)
    sig = [0] * ncols
    for i in range(nrows):
        for j in range(i+1, nrows):
            diff = [ a^b for a, b in zip(mat[i], mat[j]) ]
            s = sum(diff)
            if s > 0 :            
                for k in range(ncols): 
                    if diff[k]: sig[k] += 1./s
            else: 
                print('Same encoding for ', unicode_list[i], unicode_list[j])
    logsig = [log(i) for i in sig]
    sumlog = sum(logsig)
    nrmsig = [i/sumlog for i in logsig]
    return nrmsig


def writecsv(fname):
    """Write the codes in to a CSV file (space de-limited)"""
    header = []
    for v in range(len(CodeLens)):
        for i in range(CodeLens[v]):
            header += [CodeNames[v] + str(i)]
    headstr = 'char unicode ' + ' '.join(
        [b+'('+str(i)+')' for i,b in enumerate(delredundants(header))])

    f = open(fname, 'w')
    f.write(headstr+'\n')
    for (c, i) in char_indices.items():
        f.write(c + ' ' + unicode_list[i] + ' ' +
                      ' '.join(map(str, mallicode_list[i])) + '\n')
    def spcr(l):
        return ' '.join([str(i) for i in l]) + '\n'
    f.write('#ONs _ ' + spcr(getcolsums(mallicode_list)))
    f.write('#Val _ ' + spcr(malliwts))
    f.close()


def writepy(fname):
    """Write codes to an importable python file"""
    f = open(fname, 'w')
    f.write("# -*- coding: utf-8 -*-")
    f.write("\nchar_indices = "+ str(char_indices  ))
    f.write("\nunicodes = "    + str(unicode_list  ).replace(", '",", u'").replace("['","[u'"))
    f.write("\nmallicodes = "  + str(mallicode_list))
    f.write("\nmalliwts = "    + str(malliwts))
    f.close()

for dirpath, dirnames, filenames in os.walk(sys.argv[1]):
    char = os.path.basename(dirpath)
    if char == '':
        continue
    print('Coding', char)
    try: 
        code = getcode(char)
    except KeyError:
        print ("Could not find entry for ", char)
        continue
    char_indices[char] = ichar
    ichar += 1
    unicode_list += [code[LETTER]]
    mallicode_list += [code2list(code)]

#Add the space / null
char_indices['_'] = ichar
unicode_list   += [' ']
mallicode_list += [[0] * len(mallicode_list[0])]
malliwts = getbitsignificance(mallicode_list)

writecsv('mallicodes.csv')
writepy ('Mallicodes.py')
print('Number of characters: ', ichar+1)